// <auto-generated />
using System;
using Immedia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Immedia.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Immedia.Models.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("Immedia.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PluralName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("IconId");

                    b.HasIndex("VenueId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Immedia.Models.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("GeocodeId")
                        .HasColumnType("int");

                    b.Property<string>("HighlightedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WoeType")
                        .HasColumnType("int");

                    b.Property<string>("longId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeocodeId")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Immedia.Models.Geocode", b =>
                {
                    b.Property<int>("GeocodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Where")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeocodeId");

                    b.ToTable("Geocodes");
                });

            modelBuilder.Entity("Immedia.Models.Hit", b =>
                {
                    b.Property<int>("HitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RootImageId")
                        .HasColumnType("int");

                    b.Property<int>("comments")
                        .HasColumnType("int");

                    b.Property<int>("downloads")
                        .HasColumnType("int");

                    b.Property<int>("favorites")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("imageHeight")
                        .HasColumnType("int");

                    b.Property<int>("imageSize")
                        .HasColumnType("int");

                    b.Property<int>("imageWidth")
                        .HasColumnType("int");

                    b.Property<string>("largeImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("likes")
                        .HasColumnType("int");

                    b.Property<string>("tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("views")
                        .HasColumnType("int");

                    b.Property<int>("webformatHeight")
                        .HasColumnType("int");

                    b.Property<string>("webformatURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("webformatWidth")
                        .HasColumnType("int");

                    b.HasKey("HitId");

                    b.HasIndex("RootImageId");

                    b.ToTable("Hits");
                });

            modelBuilder.Entity("Immedia.Models.Icon", b =>
                {
                    b.Property<int>("IconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IconId");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("Immedia.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrossStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lng")
                        .HasColumnType("float");

                    b.HasKey("LocationId");

                    b.HasIndex("VenueId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Immedia.Models.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GeocodeId")
                        .HasColumnType("int");

                    b.Property<int>("RootId")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("GeocodeId");

                    b.HasIndex("RootId")
                        .IsUnique();

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Immedia.Models.Root", b =>
                {
                    b.Property<int>("RootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("RootId");

                    b.ToTable("Roots");
                });

            modelBuilder.Entity("Immedia.Models.RootImage", b =>
                {
                    b.Property<int>("RootImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResponseData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RootImageId");

                    b.ToTable("RootImages");
                });

            modelBuilder.Entity("Immedia.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.HasKey("VenueId");

                    b.HasIndex("ResponseId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Immedia.Models.Category", b =>
                {
                    b.HasOne("Immedia.Models.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("Immedia.Models.Venue", "Venue")
                        .WithMany("Categories")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Immedia.Models.Feature", b =>
                {
                    b.HasOne("Immedia.Models.Geocode", "Geocode")
                        .WithOne("feature")
                        .HasForeignKey("Immedia.Models.Feature", "GeocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Immedia.Models.Hit", b =>
                {
                    b.HasOne("Immedia.Models.RootImage", null)
                        .WithMany("hits")
                        .HasForeignKey("RootImageId");
                });

            modelBuilder.Entity("Immedia.Models.Location", b =>
                {
                    b.HasOne("Immedia.Models.Venue", "Venue")
                        .WithOne("Location")
                        .HasForeignKey("Immedia.Models.Location", "VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Immedia.Models.Response", b =>
                {
                    b.HasOne("Immedia.Models.Geocode", "Geocode")
                        .WithMany()
                        .HasForeignKey("GeocodeId");

                    b.HasOne("Immedia.Models.Root", "Root")
                        .WithOne("response")
                        .HasForeignKey("Immedia.Models.Response", "RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Immedia.Models.Venue", b =>
                {
                    b.HasOne("Immedia.Models.Response", null)
                        .WithMany("Venues")
                        .HasForeignKey("ResponseId");
                });
#pragma warning restore 612, 618
        }
    }
}
